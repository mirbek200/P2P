version: '3.7'

services:
  db:
    image: postgres:12.0-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - my-network
    env_file:
      - ./.env

  backend:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./docker/backend/Dockerfile
    command: bash -c 'python3 manage.py makemigrations &&
      python3 manage.py migrate &&
      python3 manage.py runserver 0.0.0.0:8000'
    ports:
      - 8000:8000
    networks:
      - my-network
    depends_on:
      - db
    env_file:
      - ./.env

#  nginx:
#    restart: unless-stopped
#    build:
#      context: .
#      dockerfile: ./docker/nginx/Dockerfile
#    ports:
#      - 80:80
#      - 443:443
#    volumes:
#      - ./docker/nginx/prod:/etc/nginx/conf.d
#      - static_volume:/app/backend/staticfiles
#      - media_volume:/app/backend/media
#      - ./docker/nginx/certbot/conf:/etc/letsencrypt
#      - ./docker/nginx/certbot/www:/var/www/certbot
#    networks:
#      - my-network
#    depends_on:
#      - backend
#      - db

#  certbot:
#    image: certbot/certbot
#    restart: unless-stopped
#    volumes:
#      - ./docker/nginx/certbot/conf:/etc/letsencrypt
#      - ./docker/nginx/certbot/www:/var/www/certbot
#    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"


volumes:
  media_volume:
  static_volume:
  postgres_data:

networks:
  my-network: